"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processComments = exports.getTokenLeadingComments = exports.printNodeWithComments = exports.printTokenWithComments = void 0;
var doc_1 = require("prettier/doc");
var utils_1 = require("../../types/utils");
var isEmptyDoc_1 = __importDefault(require("../../utils/isEmptyDoc"));
var hardline = doc_1.builders.hardline, lineSuffix = doc_1.builders.lineSuffix, breakParent = doc_1.builders.breakParent, literalline = doc_1.builders.literalline;
/**
 * Takes a token and return a doc with:
 * - concatenated leading comments
 * - the token image
 * - concatenated trailing comments
 *
 * @param {IToken} token
 * @return a doc with the token and its comments
 */
function printTokenWithComments(token) {
    return printWithComments(token, token.image, getTokenLeadingComments, getTokenTrailingComments);
}
exports.printTokenWithComments = printTokenWithComments;
/**
 * Takes a node and return a doc with:
 * - concatenated leading comments
 * - the node doc value
 * - concatenated trailing comments
 *
 * @param {CstNode} node
 * @param {Doc} value - the converted node value
 * @return a doc with the token and its comments
 */
function printNodeWithComments(node, value) {
    return printWithComments(node, value, getNodeLeadingComments, getNodeTrailingComments);
}
exports.printNodeWithComments = printNodeWithComments;
function printWithComments(nodeOrToken, value, getLeadingComments, getTrailingComments) {
    var leadingComments = getLeadingComments(nodeOrToken);
    var trailingComments = getTrailingComments(nodeOrToken, value);
    return leadingComments.length === 0 && trailingComments.length === 0
        ? value
        : __spreadArray(__spreadArray(__spreadArray([], leadingComments, true), [value], false), trailingComments, true);
}
/**
 * @param {IToken} token
 * @return an array containing processed leading comments and separators
 */
function getTokenLeadingComments(token) {
    return getLeadingComments(token, token);
}
exports.getTokenLeadingComments = getTokenLeadingComments;
/**
 * @param {CstNode} node
 * @return an array containing processed leading comments and separators
 */
function getNodeLeadingComments(node) {
    return getLeadingComments(node, node.location);
}
function getLeadingComments(nodeOrToken, location) {
    var arr = [];
    if (nodeOrToken.leadingComments !== undefined) {
        var previousEndLine = nodeOrToken.leadingComments[0].endLine;
        var step = void 0;
        arr.push(formatComment(nodeOrToken.leadingComments[0]));
        for (var i = 1; i < nodeOrToken.leadingComments.length; i++) {
            step = nodeOrToken.leadingComments[i].startLine - previousEndLine;
            if (step === 1 ||
                nodeOrToken.leadingComments[i].startOffset > location.startOffset) {
                arr.push(hardline);
            }
            else if (step > 1) {
                arr.push(hardline, hardline);
            }
            arr.push(formatComment(nodeOrToken.leadingComments[i]));
            previousEndLine = nodeOrToken.leadingComments[i].endLine;
        }
        step = location.startLine - previousEndLine;
        if (step === 1 ||
            nodeOrToken.leadingComments[nodeOrToken.leadingComments.length - 1]
                .startOffset > location.startOffset) {
            arr.push(hardline);
        }
        else if (step > 1) {
            arr.push(hardline, hardline);
        }
    }
    return arr;
}
/**
 * @param {IToken} token
 * @return an array containing processed trailing comments and separators
 */
function getTokenTrailingComments(token) {
    return getTrailingComments(token, token.image, token);
}
/**
 * @param {CstNode} node
 * @param {string} value
 * @return an array containing processed trailing comments and separators
 */
function getNodeTrailingComments(node, value) {
    return getTrailingComments(node, value, node.location);
}
function getTrailingComments(nodeOrToken, value, location) {
    var arr = [];
    var previousEndLine = location.endLine;
    if (nodeOrToken.trailingComments !== undefined) {
        nodeOrToken.trailingComments.forEach(function (comment, idx) {
            var separator = "";
            if (comment.startLine !== previousEndLine) {
                arr.push(hardline);
            }
            else if (!(0, isEmptyDoc_1.default)(value) && idx === 0) {
                separator = " ";
            }
            if (comment.tokenType.name === "LineComment") {
                arr.push(lineSuffix([separator, formatComment(comment), breakParent]));
            }
            else {
                arr.push(formatComment(comment));
            }
            previousEndLine = comment.endLine;
        });
    }
    return arr;
}
function isJavaDoc(comment, lines) {
    var isJavaDoc = true;
    if (comment.tokenType.name === "TraditionalComment" && lines.length > 1) {
        for (var i = 1; i < lines.length; i++) {
            if (lines[i].trim().charAt(0) !== "*") {
                isJavaDoc = false;
                break;
            }
        }
    }
    else {
        isJavaDoc = false;
    }
    return isJavaDoc;
}
function formatJavaDoc(lines) {
    var res = [lines[0].trim()];
    for (var i = 1; i < lines.length; i++) {
        res.push(hardline);
        res.push(" " + lines[i].trim());
    }
    return res;
}
function formatComment(comment) {
    var res = [];
    var lines = comment.image.split("\n");
    if (isJavaDoc(comment, lines)) {
        return formatJavaDoc(lines);
    }
    lines.forEach(function (line) {
        res.push(line);
        res.push(literalline);
    });
    res.pop();
    return res;
}
function processComments(docs) {
    if (!Array.isArray(docs)) {
        if ((0, utils_1.isCstElementOrUndefinedIToken)(docs)) {
            return printTokenWithComments(docs);
        }
        return docs;
    }
    return docs.map(function (elt) {
        if ((0, utils_1.isCstElementOrUndefinedIToken)(elt)) {
            return printTokenWithComments(elt);
        }
        return elt;
    });
}
exports.processComments = processComments;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LWNvbW1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXJzL2NvbW1lbnRzL2Zvcm1hdC1jb21tZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvQ0FBd0M7QUFHeEMsMkNBQWtFO0FBRWxFLHNFQUFnRDtBQUV4QyxJQUFBLFFBQVEsR0FBMkMsY0FBUSxTQUFuRCxFQUFFLFVBQVUsR0FBK0IsY0FBUSxXQUF2QyxFQUFFLFdBQVcsR0FBa0IsY0FBUSxZQUExQixFQUFFLFdBQVcsR0FBSyxjQUFRLFlBQWIsQ0FBYztBQUVwRTs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLHNCQUFzQixDQUFDLEtBQWE7SUFDbEQsT0FBTyxpQkFBaUIsQ0FDdEIsS0FBSyxFQUNMLEtBQUssQ0FBQyxLQUFLLEVBQ1gsdUJBQXVCLEVBQ3ZCLHdCQUF3QixDQUN6QixDQUFDO0FBQ0osQ0FBQztBQVBELHdEQU9DO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBZ0IscUJBQXFCLENBQUMsSUFBYSxFQUFFLEtBQVU7SUFDN0QsT0FBTyxpQkFBaUIsQ0FDdEIsSUFBSSxFQUNKLEtBQUssRUFDTCxzQkFBc0IsRUFDdEIsdUJBQXVCLENBQ3hCLENBQUM7QUFDSixDQUFDO0FBUEQsc0RBT0M7QUFFRCxTQUFTLGlCQUFpQixDQUN4QixXQUFjLEVBQ2QsS0FBVSxFQUNWLGtCQUF1QyxFQUN2QyxtQkFBb0Q7SUFFcEQsSUFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEQsSUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFakUsT0FBTyxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUNsRSxDQUFDLENBQUMsS0FBSztRQUNQLENBQUMsK0NBQUssZUFBZSxV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