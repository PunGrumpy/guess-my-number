"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypesValuesAndVariablesPrettierVisitor = void 0;
var forEach_1 = __importDefault(require("lodash/forEach"));
var prettier_builder_1 = require("./prettier-builder");
var format_comments_1 = require("./comments/format-comments");
var printer_utils_1 = require("./printer-utils");
var base_cst_printer_1 = require("../base-cst-printer");
var utils_1 = require("../types/utils");
var TypesValuesAndVariablesPrettierVisitor = /** @class */ (function (_super) {
    __extends(TypesValuesAndVariablesPrettierVisitor, _super);
    function TypesValuesAndVariablesPrettierVisitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TypesValuesAndVariablesPrettierVisitor.prototype.primitiveType = function (ctx) {
        var annotations = this.mapVisit(ctx.annotation);
        var type = ctx.numericType
            ? this.visit(ctx.numericType)
            : this.getSingle(ctx);
        return (0, printer_utils_1.rejectAndJoin)(" ", [(0, prettier_builder_1.join)(" ", annotations), type]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.numericType = function (ctx) {
        return this.visitSingle(ctx);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.integralType = function (ctx) {
        return (0, format_comments_1.printTokenWithComments)(this.getSingle(ctx));
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.floatingPointType = function (ctx) {
        return (0, format_comments_1.printTokenWithComments)(this.getSingle(ctx));
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.referenceType = function (ctx) {
        var annotations = this.mapVisit(ctx.annotation);
        var type = ctx.primitiveType
            ? this.visit(ctx.primitiveType)
            : this.visit(ctx.classOrInterfaceType);
        var dims = this.visit(ctx.dims);
        return (0, printer_utils_1.rejectAndJoin)(" ", [(0, prettier_builder_1.join)(" ", annotations), (0, prettier_builder_1.concat)([type, dims])]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.classOrInterfaceType = function (ctx) {
        return this.visitSingle(ctx);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.classType = function (ctx) {
        var _this = this;
        var tokens = (0, printer_utils_1.sortClassTypeChildren)(ctx.annotation, ctx.typeArguments, ctx.Identifier);
        var segments = [];
        var currentSegment = [];
        (0, forEach_1.default)(tokens, function (token, i) {
            if ((0, utils_1.isTypeArgumentsCstNode)(token)) {
                currentSegment.push(_this.visit([token]));
                segments.push((0, printer_utils_1.rejectAndConcat)(currentSegment));
                currentSegment = [];
            }
            else if ((0, utils_1.isAnnotationCstNode)(token)) {
                currentSegment.push(_this.visit([token]), " ");
            }
            else {
                currentSegment.push(token);
                if ((i + 1 < tokens.length && !(0, utils_1.isTypeArgumentsCstNode)(tokens[i + 1])) ||
                    i + 1 === tokens.length) {
                    segments.push((0, printer_utils_1.rejectAndConcat)(currentSegment));
                    currentSegment = [];
                }
            }
        });
        return (0, printer_utils_1.rejectAndJoinSeps)(ctx.Dot, segments);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.interfaceType = function (ctx) {
        return this.visitSingle(ctx);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.typeVariable = function (ctx) {
        var annotations = this.mapVisit(ctx.annotation);
        var identifier = this.getSingle(ctx);
        return (0, printer_utils_1.rejectAndJoin)(" ", [(0, prettier_builder_1.join)(" ", annotations), identifier]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.dims = function (ctx) {
        var _this = this;
        var tokens = __spreadArray([], ctx.LSquare, true);
        if (ctx.annotation) {
            tokens = __spreadArray(__spreadArray([], tokens, true), ctx.annotation, true);
        }
        tokens = tokens.sort(function (a, b) {
            var startOffset1 = (0, utils_1.isCstNode)(a)
                ? a.children.At[0].startOffset
                : a.startOffset;
            var startOffset2 = (0, utils_1.isCstNode)(b)
                ? b.children.At[0].startOffset
                : b.startOffset;
            return startOffset1 - startOffset2;
        });
        var segments = [];
        var currentSegment = [];
        (0, forEach_1.default)(tokens, function (token) {
            if ((0, utils_1.isCstNode)(token)) {
                currentSegment.push(_this.visit([token]));
            }
            else {
                segments.push((0, printer_utils_1.rejectAndConcat)([
                    (0, printer_utils_1.rejectAndJoin)(" ", currentSegment),
                    (0, prettier_builder_1.concat)([ctx.LSquare[0], ctx.RSquare[0]])
                ]));
                currentSegment = [];
            }
        });
        return (0, printer_utils_1.rejectAndConcat)(segments);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.typeParameter = function (ctx) {
        var typeParameterModifiers = this.mapVisit(ctx.typeParameterModifier);
        var typeIdentifier = this.visit(ctx.typeIdentifier);
        var typeBound = this.visit(ctx.typeBound);
        return (0, printer_utils_1.rejectAndJoin)(" ", [
            (0, prettier_builder_1.join)(" ", typeParameterModifiers),
            typeIdentifier,
            typeBound
        ]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.typeParameterModifier = function (ctx) {
        return this.visitSingle(ctx);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.typeBound = function (ctx) {
        var classOrInterfaceType = this.visit(ctx.classOrInterfaceType);
        var additionalBound = this.mapVisit(ctx.additionalBound);
        return (0, printer_utils_1.rejectAndJoin)(" ", [
            ctx.Extends[0],
            classOrInterfaceType,
            (0, prettier_builder_1.join)(" ", additionalBound)
        ]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.additionalBound = function (ctx) {
        var interfaceType = this.visit(ctx.interfaceType);
        return (0, prettier_builder_1.join)(" ", [ctx.And[0], interfaceType]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.typeArguments = function (ctx) {
        var typeArgumentList = this.visit(ctx.typeArgumentList);
        return (0, printer_utils_1.rejectAndConcat)([ctx.Less[0], typeArgumentList, ctx.Greater[0]]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.typeArgumentList = function (ctx) {
        var typeArguments = this.mapVisit(ctx.typeArgument);
        var commas = ctx.Comma ? ctx.Comma.map(function (elt) { return (0, prettier_builder_1.concat)([elt, " "]); }) : [];
        return (0, printer_utils_1.rejectAndJoinSeps)(commas, typeArguments);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.typeArgument = function (ctx) {
        return this.visitSingle(ctx);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.wildcard = function (ctx) {
        var annotations = this.mapVisit(ctx.annotation);
        var wildcardBounds = this.visit(ctx.wildcardBounds);
        return (0, printer_utils_1.rejectAndJoin)(" ", [
            (0, prettier_builder_1.join)(" ", annotations),
            ctx.QuestionMark[0],
            wildcardBounds
        ]);
    };
    TypesValuesAndVariablesPrettierVisitor.prototype.wildcardBounds = function (ctx) {
        var keyWord = ctx.Extends ? ctx.Extends[0] : ctx.Super[0];
        var referenceType = this.visit(ctx.referenceType);
        return (0, prettier_builder_1.join)(" ", [keyWord, referenceType]);
    };
    return TypesValuesAndVariablesPrettierVisitor;
}(base_cst_printer_1.BaseCstPrettierPrinter));
exports.TypesValuesAndVariablesPrettierVisitor = TypesValuesAndVariablesPrettierVisitor;
//# sourceMappingURL=data:application/json;base64,